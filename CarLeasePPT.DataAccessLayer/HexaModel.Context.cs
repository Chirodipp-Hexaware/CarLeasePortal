//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarLeasePPT.DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HexaEntities : DbContext
    {
        public HexaEntities()
            : base("name=HexaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AssessmentRatioMaster> AssessmentRatioMasters { get; set; }
        public virtual DbSet<AssetStatus> AssetStatuses { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<LeaseAttachmentType> LeaseAttachmentTypes { get; set; }
        public virtual DbSet<LeaseStatus> LeaseStatuses { get; set; }
        public virtual DbSet<Parcel> Parcels { get; set; }
        public virtual DbSet<ParcelTaxBill> ParcelTaxBills { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonRole> PersonRoles { get; set; }
        public virtual DbSet<PersonSession> PersonSessions { get; set; }
        public virtual DbSet<PhysicalAddress> PhysicalAddresses { get; set; }
        public virtual DbSet<Preference> Preferences { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<TaxAssessor> TaxAssessors { get; set; }
        public virtual DbSet<TaxBill> TaxBills { get; set; }
        public virtual DbSet<TaxBillAttachmentType> TaxBillAttachmentTypes { get; set; }
        public virtual DbSet<TaxBillCarLease> TaxBillCarLeases { get; set; }
        public virtual DbSet<TaxCollector> TaxCollectors { get; set; }
        public virtual DbSet<TaxPayment> TaxPayments { get; set; }
        public virtual DbSet<CarLease> CarLeases { get; set; }
        public virtual DbSet<CarMaster> CarMasters { get; set; }
        public virtual DbSet<CarValuation> CarValuations { get; set; }
        public virtual DbSet<WorkItemActivityType> WorkItemActivityTypes { get; set; }
        public virtual DbSet<WorkItemStatus> WorkItemStatus { get; set; }
        public virtual DbSet<WorkItemType> WorkItemTypes { get; set; }
        public virtual DbSet<ViewDocumentFileStore> ViewDocumentFileStores { get; set; }
        public virtual DbSet<PersonSecurityReset> PersonSecurityResets { get; set; }
        public virtual DbSet<PersonSecurity> PersonSecurities { get; set; }
        public virtual DbSet<AuthenticationFailure> AuthenticationFailures { get; set; }
        public virtual DbSet<PersonBlock> PersonBlocks { get; set; }
        public virtual DbSet<WorkItem> WorkItems { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<LeaseAttachment> LeaseAttachments { get; set; }
        public virtual DbSet<TaxBillAttachment> TaxBillAttachments { get; set; }
        public virtual DbSet<WorkItemActivity> WorkItemActivities { get; set; }
        public virtual DbSet<WorkItemAttachment> WorkItemAttachments { get; set; }
        public virtual DbSet<BlockedPassword> BlockedPasswords { get; set; }
    
        public virtual int Document_Add(string relativePath, string name, byte[] stream, ObjectParameter stream_id)
        {
            var relativePathParameter = relativePath != null ?
                new ObjectParameter("relativePath", relativePath) :
                new ObjectParameter("relativePath", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var streamParameter = stream != null ?
                new ObjectParameter("stream", stream) :
                new ObjectParameter("stream", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Document_Add", relativePathParameter, nameParameter, streamParameter, stream_id);
        }
    }
}
